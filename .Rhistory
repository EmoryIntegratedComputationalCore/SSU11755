svalues2<-as.data.frame(res_2LFC$svalue)
res2_df['S-value'] <- svalues2
stopifnot(ncol(res2_df)==8)
#svalues
res_3LFC <- lfcShrink(dds2, coef="dose_group_C_vs_B", type="apeglm", svalue=TRUE)
svalues3<-as.data.frame(res_3LFC$svalue)
res3_df['S-value'] <- svalues3
stopifnot(ncol(res3_df)==8)
#visualization for PCA
vsd1 <- vst(dds1, blind=FALSE)
vsd2 <- vst(dds2, blind=FALSE)
plotPCA(vsd1, intgroup=c("batch"))
plotPCA(vsd2, intgroup=c("batch"))
#export plots
pcaplot1=png("SSU11755_pcaplot_batch_111219.png", width=450, height=450)
theme_set(theme_classic())
plotPCA(vsd1, intgroup=c("batch"))
dev.off()
plotPCA(vsd1, intgroup=c("dose_group"))
#export plot
pcaplot2=png("SSU11755_pcaplot_group_111219.png", width=450, height=450)
theme_set(theme_classic())
plotPCA(vsd2, intgroup=c("dose_group"))
dev.off()
#MA plots
#compare B vs A
resLFC1 <- lfcShrink(dds1, coef="dose_group_B_vs_A", type="apeglm")
#compare C vs A
resLFC2 <- lfcShrink(dds1, coef="dose_group_C_vs_A", type="apeglm")
#compare C vs B
resLFC3 <- lfcShrink(dds2, coef="dose_group_C_vs_B", type="apeglm")
plotMA(resLFC1,ylim=c(-10,10), main="DE genes between 1x10^6 and 0")
maplot1=png("SSU11755_maplot_BvsA_111219.png", width=450, height=450)
theme_set(theme_classic())
plotMA(resLFC1,ylim=c(-10,10), main="DE genes between 1x10^6 and 0")
dev.off()
#res2
plotMA(resLFC2,ylim=c(-10,10), main="DE genes between 1x10^9 and 0")
plotPCA(vsd1, intgroup=c("dose_group"))
#export plot
pcaplot2=png("SSU11755_pcaplot_group_01022020.png", width=450, height=450)
theme_set(theme_classic())
plotPCA(vsd2, intgroup=c("dose_group"))
dev.off()
maplot1=png("SSU11755_maplot_BvsA_01022020.png", width=450, height=450)
theme_set(theme_classic())
plotMA(resLFC1,ylim=c(-10,10), main="DE genes between 1x10^6 and 0")
dev.off()
#res2
plotMA(resLFC2,ylim=c(-10,10), main="DE genes between 1x10^9 and 0")
maplot2=png("SSU11755_maplot_CvsA_01022020.png", width=450, height=450)
theme_set(theme_classic())
plotMA(resLFC2,ylim=c(-10,10), main="DE genes between 1x10^9 and 0")
dev.off()
maplot3=png("SSU11755_maplot_CvsB_01022020.png", width=450, height=450)
theme_set(theme_classic())
plotMA(resLFC3,ylim=c(-5,5), main="DE genes between 1x10^9 and 1x10^6")
dev.off()
###volcano plots###
#res1
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 10),
title='Log(2)FC vs. -Log(10)FDR',
subtitle='Viral concentration 1x10^6 and 0',
pCutoff = 0.01, #this is FDR<0.01,
FCcutoff=1.0, #this is arbitrary since I don't know a cutoff of interest
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change')) #this is arbitrary since I don't know a cutoff of interest
volc1=png("SSU11755_volcanoplot_1x10^6vs0_01022020.png", width=450, height=450)
theme_set(theme_classic())
EnhancedVolcano(resLFC1,
lab = rownames(resLFC1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 10),
title='Log(2)FC vs. -Log(10)FDR',
subtitle='Viral concentration 1x10^6 and 0',
pCutoff = 0.01, #this is FDR<0.01,
FCcutoff=1.0, #this is arbitrary since I don't know a cutoff of interest
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change'))
dev.off()
#res2
EnhancedVolcano(res2,
lab = rownames(res2),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 10),
title=NULL,
subtitle=NULL,
pLabellingCutoff = 0.01,
pCutoff = 0.01,
FCcutoff=1.0,
legendPosition = "bottom",
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change'))
volc2=png("SSU11755_volcanoplot_1x10^9vs0_01022020.png", width=700, height=600)
EnhancedVolcano(res2,
lab = rownames(res2),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 10),
title=NULL,
subtitle=NULL,
pLabellingCutoff = 0.01,
pCutoff = 0.01,
FCcutoff=1.0,
legendPosition = "bottom",
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change'))
dev.off()
#res3
EnhancedVolcano(res3,
lab = rownames(res3),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 5),
title=NULL,
subtitle=NULL,
pLabellingCutoff = 0.01,
pCutoff = 0.01,
FCcutoff=1.0,
legendPosition = "bottom",
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change'))
volc3=png("SSU11755_volcanoplot_1x10^9vs1x10^6_01022020.png", width=700, height=600)
EnhancedVolcano(res3,
lab = rownames(res3),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 5),
title=NULL,
subtitle=NULL,
pLabellingCutoff = 0.01,
pCutoff = 0.01,
FCcutoff=1.0,
legendPosition = "bottom",
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change'))
dev.off()
##heatmaps
#one for each comparison using vsd transformed data created for PCA plots
#dds1
select<-
order(rowMeans(counts(dds1, normalized=TRUE)),
decreasing = TRUE)[1:20]
heat1<-
as.data.frame(colData(dds1)["dose_group"])
heatmap1<-
pheatmap(assay(vsd1)[select,], cluster_rows=FALSE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = heat1)
pacman::p_load("here", "readr", "janitor", "assertr", "tidyverse",
"DESeq2", "ggplot2", "EnhancedVolcano","apeglm", "vsn", "pheatmap")
##heatmaps
#one for each comparison using vsd transformed data created for PCA plots
#dds1
select<-
order(rowMeans(counts(dds1, normalized=TRUE)),
decreasing = TRUE)[1:20]
heat1<-
as.data.frame(colData(dds1)["dose_group"])
heatmap1<-
pheatmap(assay(vsd1)[select,], cluster_rows=FALSE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = heat1)
heatmap1<-
pheatmap(assay(vsd1)[select,], cluster_rows=TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = heat1)
###volcano plots###
#res1
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 10),
title= NULL,
subtitle= NULL,
pLabellingCutoff = 0.01,
pCutoff = 0.01, #this is FDR<0.01,
legendPosition = "bottom",
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change'))
volc1=png("SSU11755_volcanoplot_1x10^6vs0_01022020.png", width=450, height=450)
theme_set(theme_classic())
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 10),
title= NULL,
subtitle= NULL,
pLabellingCutoff = 0.01,
pCutoff = 0.01, #this is FDR<0.01,
legendPosition = "bottom",
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change'))
dev.off()
pacman::p_load("here", "readr", "janitor", "assertr", "tidyverse",
"DESeq2", "ggplot2", "EnhancedVolcano","apeglm", "vsn", "pheatmap")
files <-list(
counts = here("human_ref/DiffExpAnalysis/Repository/input/countdata.csv"),
sampledata = here("human_ref/DiffExpAnalysis/Repository/input/sampledata.csv"),
results_res1 = here("human_ref/DiffExpAnalysis/Repository/output/SSU11755_BvsA_DEGanalysis.csv"),
results_res2 = here("human_ref/DiffExpAnalysis/Repository/output/SSU11755_CvsA_DEGanalysis.csv"),
results_res3 = here("human_ref/DiffExpAnalysis/Repository/output/SSU11755_CvsB_DEGanalysis.csv")
)
#verify(is_non_empty(files$list))
#load count and sample data for all comparisons as a glm
countdata <-as.matrix(read.csv(files$counts, row.names=1))
#FIXME: unit test
#sample data
sampledata <-read.csv(files$sampledata, row.names=1)%>%
janitor::clean_names()
#fix verify(nrow(sampledata)== 9)
stopifnot(rownames(sampledata) %in% colnames(countdata))
dds1 <- DESeqDataSetFromMatrix(countData = countdata,
colData = sampledata,
design = ~batch+dose_group)
dds2 <- DESeqDataSetFromMatrix(countData = countdata,
colData = sampledata,
design = ~batch*dose_group)
#set the reference level
#comparing B to A and C to A
dds1$dose_group <- relevel(dds1$dose_group, ref = "A")
#comparing C to B
dds2$dose_group <- relevel(dds2$dose_group, ref = "B")
#run nbinom model
dds1 <- DESeq(dds1)
dds2 <- DESeq(dds2)
resultsNames(dds1)
resultsNames(dds2)
#comparisons
res1 <- results(dds1, alpha=0.01, name="dose_group_B_vs_A")
summary(res1)
res2 <- results(dds1, alpha=0.01, name="dose_group_C_vs_A")
summary(res2)
res3 <- results(dds2, alpha=0.01, name="dose_group_C_vs_B")
summary(res3)
#create data frames of results of each comparison with gene symbol in a column called  ID
res1_df<-as.data.frame(res1) %>%
mutate(ID<-as.factor((row.names(res1))))
stopifnot(nrow(res1_df)==26485 & ncol(res1_df)==7)
res2_df<-as.data.frame(res2) %>%
mutate(ID<-as.factor((row.names(res2))))
stopifnot(nrow(res2_df)==26485 & ncol(res2_df)==7)
res3_df<-as.data.frame(res3) %>%
mutate(ID<-as.factor((row.names(res3))))
stopifnot(nrow(res3_df)==26485 & ncol(res3_df)==7)
#export
res1_df %>%
write_delim(files$results_res1, delim=",")
res2_df %>%
write_delim(files$results_res2, delim=",")
res3_df %>%
write_delim(files$results_res3, delim=",")
#obtain and include svalues in final results spreadsheet
res_1LFC <- lfcShrink(dds1, coef="dose_group_B_vs_A", type="apeglm", svalue=TRUE)
svalues1<-as.data.frame(res_1LFC$svalue)
res1_df['S-value'] <- svalues1
stopifnot(ncol(res1_df)==8)
#svalues
res_2LFC <- lfcShrink(dds1, coef="dose_group_C_vs_A", type="apeglm", svalue=TRUE)
svalues2<-as.data.frame(res_2LFC$svalue)
res2_df['S-value'] <- svalues2
stopifnot(ncol(res2_df)==8)
#svalues
res_3LFC <- lfcShrink(dds2, coef="dose_group_C_vs_B", type="apeglm", svalue=TRUE)
svalues3<-as.data.frame(res_3LFC$svalue)
res3_df['S-value'] <- svalues3
stopifnot(ncol(res3_df)==8)
#visualization for PCA
vsd1 <- vst(dds1, blind=FALSE)
vsd2 <- vst(dds2, blind=FALSE)
plotPCA(vsd1, intgroup=c("dose_group"))
#export plot
pcaplot2=png("SSU11755_pcaplot_group_01022020.png", width=450, height=450)
theme_set(theme_classic())
plotPCA(vsd2, intgroup=c("dose_group"))
dev.off()
#these are the samples run in batch 1, found a batch effect
#MA plots
#compare B vs A
resLFC1 <- lfcShrink(dds1, coef="dose_group_B_vs_A", type="apeglm")
#compare C vs A
resLFC2 <- lfcShrink(dds1, coef="dose_group_C_vs_A", type="apeglm")
#compare C vs B
resLFC3 <- lfcShrink(dds2, coef="dose_group_C_vs_B", type="apeglm")
plotMA(resLFC1,ylim=c(-10,10), main="DE genes between 1x10^6 and 0")
maplot1=png("SSU11755_maplot_BvsA_01022020.png", width=450, height=450)
theme_set(theme_classic())
plotMA(resLFC1,ylim=c(-10,10), main="DE genes between 1x10^6 and 0")
dev.off()
#res2
plotMA(resLFC2,ylim=c(-10,10), main="DE genes between 1x10^9 and 0")
maplot2=png("SSU11755_maplot_CvsA_01022020.png", width=450, height=450)
theme_set(theme_classic())
plotMA(resLFC2,ylim=c(-10,10), main="DE genes between 1x10^9 and 0")
dev.off()
#res3, no lfc threshold here
plotMA(resLFC3, ylim=c(-5,5), main="DE genes between 1x10^9 and 1x10^6")
maplot3=png("SSU11755_maplot_CvsB_01022020.png", width=450, height=450)
theme_set(theme_classic())
plotMA(resLFC3,ylim=c(-5,5), main="DE genes between 1x10^9 and 1x10^6")
dev.off()
###volcano plots###
#res1
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 10),
title= NULL,
subtitle= NULL,
pLabellingCutoff = 0.01,
pCutoff = 0.01, #this is FDR<0.01,
legendPosition = "bottom",
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change'))
volc1=png("SSU11755_volcanoplot_1x10^6vs0_01022020.png", width=450, height=450)
theme_set(theme_classic())
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 10),
title= NULL,
subtitle= NULL,
pLabellingCutoff = 0.01,
pCutoff = 0.01, #this is FDR<0.01,
legendPosition = "bottom",
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change'))
dev.off()
#res2
EnhancedVolcano(res2,
lab = rownames(res2),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 10),
title=NULL,
subtitle=NULL,
pLabellingCutoff = 0.01,
pCutoff = 0.01,
FCcutoff=1.0,
legendPosition = "bottom",
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change'))
volc2=png("SSU11755_volcanoplot_1x10^9vs0_01022020.png", width=700, height=600)
EnhancedVolcano(res2,
lab = rownames(res2),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 10),
title=NULL,
subtitle=NULL,
pLabellingCutoff = 0.01,
pCutoff = 0.01,
FCcutoff=1.0,
legendPosition = "bottom",
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change'))
dev.off()
#res3
EnhancedVolcano(res3,
lab = rownames(res3),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 5),
title=NULL,
subtitle=NULL,
pLabellingCutoff = 0.01,
pCutoff = 0.01,
FCcutoff=1.0,
legendPosition = "bottom",
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change'))
volc3=png("SSU11755_volcanoplot_1x10^9vs1x10^6_01022020.png", width=700, height=600)
EnhancedVolcano(res3,
lab = rownames(res3),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 5),
title=NULL,
subtitle=NULL,
pLabellingCutoff = 0.01,
pCutoff = 0.01,
FCcutoff=1.0,
legendPosition = "bottom",
legend=c('NS','Log2 fold-change','adj P-value',
'adj P-value & Log2 fold-change'))
dev.off()
#heatmaps
##heatmaps
#one for each comparison using vsd transformed data created for PCA plots
#dds1
select<-
order(rowMeans(counts(dds1, normalized=TRUE)),
decreasing = TRUE)[1:20]
heat1<-
as.data.frame(colData(dds1)["dose_group"])
heatmap1<-
pheatmap(assay(vsd1)[select,], cluster_rows=TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = heat1)
#another way to export graphics in high dpi
ggsave("heatmap_Aasref_01022020.png",plot=heatmap1,dpi=1000)
#dds2
select<-
order(rowMeans(counts(dds2, normalized=TRUE)),
decreasing = TRUE)[1:20]
heat2<-
as.data.frame(colData(dds_2)["dose_group"])
heatmap2<-
pheatmap(assay(vds2)[select,], cluster_rows=TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = heat2)
ggsave("heatmap_Basref_01022020.png.png",plot=heatmap2,dpi=1000)
#dds2
select<-
order(rowMeans(counts(dds2, normalized=TRUE)),
decreasing = TRUE)[1:20]
heat2<-
as.data.frame(colData(dds2)["dose_group"])
heatmap2<-
pheatmap(assay(vsd2)[select,], cluster_rows=TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = heat2)
ggsave("heatmap_Basref_01022020.png.png",plot=heatmap2,dpi=1000)
pacman::p_load("here", "readr", "janitor", "assertr", "tidyverse",
"DESeq2", "ggplot2", "EnhancedVolcano","apeglm", "vsn",
"pheatmap", "org.Mm.eg.db", "annotationDbi")
pacman::p_load("here", "readr", "janitor", "assertr", "tidyverse",
"DESeq2", "ggplot2", "EnhancedVolcano","apeglm", "vsn",
"pheatmap", "org.Mm.eg.db", "AnnotationDbi")
#############################
#pathway analysis
#############################
#get entrez ids and genenames
res1$entrez = mapIds(org.Mm.eg.db,
keys=row.names(res1),
column="ENTREZID",
keytype="SYMBOL",
multiVals="first")
res1$name =   mapIds(org.Mm.eg.db,
keys=row.names(res1),
column="GENENAME",
keytype="SYMBOL",
multiVals="first")
head(res1, 10)
#res2
res2$entrez = mapIds(org.Mm.eg.db,
keys=row.names(res2),
column="ENTREZID",
keytype="SYMBOL",
multiVals="first")
res2$name =   mapIds(org.Mm.eg.db,
keys=row.names(res2),
column="GENENAME",
keytype="SYMBOL",
multiVals="first")
head(res2, 10)
#res3
res3$entrez = mapIds(org.Mm.eg.db,
keys=row.names(res3),
column="ENTREZID",
keytype="SYMBOL",
multiVals="first")
res3$name =   mapIds(org.Mm.eg.db,
keys=row.names(res3),
column="GENENAME",
keytype="SYMBOL",
multiVals="first")
head(res3, 10)
pacman::p_load("here", "readr", "janitor", "assertr", "tidyverse",
"DESeq2", "ggplot2", "EnhancedVolcano","apeglm", "vsn",
"pheatmap", "org.Mm.eg.db", "AnnotationDbi",
"pathview", "gage", "gageData","dplyr")
data(kegg.sets.mm)
#get a matrix of fold changes and entrez ids
foldchanges1 = res1$log2FoldChange
names(foldchanges1) = res1$entrez
head(foldchanges1)
#res2
foldchanges2 = res2$log2FoldChange
names(foldchanges2) = res2$entrez
head(foldchanges2)
#res3
foldchanges3 = res3$log2FoldChange
names(foldchanges3) = res3$entrez
head(foldchanges3)
#run KEGG pathway analysis
keggres1 = gage(foldchanges1, gsets=kegg.sets.mm, same.dir=TRUE)
# Look at both up (greater), down (less), and statistics
lapply(keggres1, head, 10)
dim(keggres1$less) #225 6
#keggres3
keggres3 = gage(foldchanges3, gsets=kegg.sets.mm, same.dir=TRUE)
# Look at both up (greater), down (less), and statistics
lapply(keggres3, head, 10)
#use these KEGG pathway IDs downstream for plotting
keggres1pathways_less = data.frame(id=rownames(keggres1$less), keggres1$less) %>%
tbl_df() %>%
filter(row_number()<=225) %>%
.$id %>%
as.character()
keggres1pathways_less
keggres1ids_less = substr(keggres1pathways_less, start=1, stop=8)
keggres1ids_less
#export results as excel spreadsheet
keggresDF1_less <- as.data.frame(keggres1$less[1:225,])
pathwayids1_less<-as.factor(rownames(keggres1$less[1:225,]))
keggresDF1_less['Pathway'] <- pathwayids1_less
head(keggresDF1_less)
